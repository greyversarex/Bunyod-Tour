const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);
const DB_PATH = path.join(__dirname, '../../database.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ sqlite3 CLI
async function executeSQLCommand(sql) {
    try {
        const command = `sqlite3 "${DB_PATH}" "${sql}"`;
        const { stdout, stderr } = await execAsync(command);
        if (stderr && !stderr.includes('already exists')) {
            console.error('SQL Error:', stderr);
            throw new Error(stderr);
        }
        return stdout;
    } catch (error) {
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
async function executeSQLQuery(sql) {
    try {
        const command = `sqlite3 "${DB_PATH}" "${sql}"`;
        const { stdout } = await execAsync(command);
        return stdout.trim();
    } catch (error) {
        throw error;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
async function initializeTables() {
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const tables = [
        // –¢–∞–±–ª–∏—Ü–∞ —Ç—É—Ä–æ–≤
        `CREATE TABLE IF NOT EXISTS tours (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            country TEXT,
            price REAL,
            category TEXT,
            start_date TEXT,
            end_date TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );`,
        
        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        `CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            email TEXT UNIQUE,
            role TEXT DEFAULT 'client',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );`,
        
        // –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        `CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            tour_id INTEGER,
            status TEXT DEFAULT 'pending',
            booking_date TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id),
            FOREIGN KEY (tour_id) REFERENCES tours(id)
        );`,
        
        // –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ü–∏–π
        `CREATE TABLE IF NOT EXISTS promotions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            discount REAL,
            start_date TEXT,
            end_date TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );`
    ];

    for (const tableSQL of tables) {
        await executeSQLCommand(tableSQL);
    }
    
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function insertTestData() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const count = await executeSQLQuery("SELECT COUNT(*) FROM tours;");
    
    if (parseInt(count) > 0) {
        console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
        return;
    }

    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
        ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin@bunyod-tour.com', 'admin'],
        ['–ê–ª–∏–µ–≤ –®–æ—Ö–∑–æ–¥', 'shohzod@email.com', 'client'],
        ['–ú–∞—Ä—å—è–º –ù–∞—Å–∏—Ä–æ–≤–∞', 'maryam@email.com', 'client'],
        ['–¢—É—Ä–∞–≥–µ–Ω—Ç –§–∞—Ä—Ö–æ–¥', 'farhod@bunyod-tour.com', 'agent']
    ];

    for (const [name, email, role] of users) {
        await executeSQLCommand(`INSERT INTO users (name, email, role) VALUES ('${name}', '${email}', '${role}');`);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–æ–≤
    const tours = [
        [
            '–û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä –ø–æ –î—É—à–∞–Ω–±–µ',
            '–ü–æ—Å–µ—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ —Å—Ç–æ–ª–∏—Ü—ã –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞',
            '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
            45.0,
            '–æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π',
            '2024-03-01',
            '2024-03-01'
        ],
        [
            '–¢—Ä–µ–∫ –∫ –ò—Å–∫–∞–Ω–¥–µ—Ä–∫—É–ª—é',
            '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π –ø–æ—Ö–æ–¥ –∫ —Å–∞–º–æ–º—É –∫—Ä–∞—Å–∏–≤–æ–º—É –æ–∑–µ—Ä—É –≤ –§–∞–Ω—Å–∫–∏—Ö –≥–æ—Ä–∞—Ö',
            '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
            120.0,
            '—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π',
            '2024-04-15',
            '2024-04-17'
        ],
        [
            '–¢—É—Ä –ø–æ –ü–∞–º–∏—Ä—É',
            '–ù–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ö—Ä—ã—à–µ –º–∏—Ä–∞',
            '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
            350.0,
            '–º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–π',
            '2024-05-10',
            '2024-05-18'
        ],
        [
            '–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä –ø–æ –•—É–¥–∂–∞–Ω–¥—É',
            '–û—Ç–∫—Ä–æ–π—Ç–µ –¥—Ä–µ–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –≤—Ç–æ—Ä–æ–≥–æ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –≥–æ—Ä–æ–¥–∞ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞',
            '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
            80.0,
            '–∫—É–ª—å—Ç—É—Ä–Ω—ã–π',
            '2024-06-05',
            '2024-06-06'
        ]
    ];

    for (const [title, description, country, price, category, start_date, end_date] of tours) {
        await executeSQLCommand(`INSERT INTO tours (title, description, country, price, category, start_date, end_date) VALUES ('${title}', '${description}', '${country}', ${price}, '${category}', '${start_date}', '${end_date}');`);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–π
    await executeSQLCommand(`INSERT INTO promotions (title, description, discount, start_date, end_date) VALUES ('–í–µ—Å–µ–Ω–Ω—è—è —Å–∫–∏–¥–∫–∞ 2024', '–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Å–µ —Ç—É—Ä—ã –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ 31 –º–∞—Ä—Ç–∞', 15.0, '2024-03-01', '2024-03-31');`);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const bookings = [
        [2, 1, 'confirmed', '2024-02-15'],
        [3, 2, 'pending', '2024-02-20'],
        [2, 3, 'confirmed', '2024-02-25']
    ];

    for (const [user_id, tour_id, status, booking_date] of bookings) {
        await executeSQLCommand(`INSERT INTO bookings (user_id, tour_id, status, booking_date) VALUES (${user_id}, ${tour_id}, '${status}', '${booking_date}');`);
    }

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeDatabase() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(DB_PATH)) {
            await executeSQLCommand('.quit');
            console.log('üìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω');
        }
        
        await initializeTables();
        await insertTestData();
        
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        console.log(`üìç –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${DB_PATH}`);
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function getAllTours() {
    try {
        const result = await executeSQLQuery("SELECT * FROM tours;");
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤:', error);
        return null;
    }
}

async function getAllUsers() {
    try {
        const result = await executeSQLQuery("SELECT * FROM users;");
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return null;
    }
}

async function getAllBookings() {
    try {
        const result = await executeSQLQuery(`
            SELECT b.*, u.name as user_name, t.title as tour_title 
            FROM bookings b 
            LEFT JOIN users u ON b.user_id = u.id 
            LEFT JOIN tours t ON b.tour_id = t.id;
        `);
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
        return null;
    }
}

async function getAllPromotions() {
    try {
        const result = await executeSQLQuery("SELECT * FROM promotions;");
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–π:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getDatabaseStats() {
    try {
        const toursCount = await executeSQLQuery("SELECT COUNT(*) FROM tours;");
        const usersCount = await executeSQLQuery("SELECT COUNT(*) FROM users;");
        const bookingsCount = await executeSQLQuery("SELECT COUNT(*) FROM bookings;");
        const promotionsCount = await executeSQLQuery("SELECT COUNT(*) FROM promotions;");
        
        return {
            tours: parseInt(toursCount),
            users: parseInt(usersCount),
            bookings: parseInt(bookingsCount),
            promotions: parseInt(promotionsCount)
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
    }
}

module.exports = {
    initializeDatabase,
    getAllTours,
    getAllUsers,
    getAllBookings,
    getAllPromotions,
    getDatabaseStats,
    executeSQLCommand,
    executeSQLQuery,
    DB_PATH
};